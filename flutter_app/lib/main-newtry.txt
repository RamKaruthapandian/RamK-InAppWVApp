import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart' as ram;
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:flutter_user_agent/flutter_user_agent.dart';

Future main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => new _MyAppState();
}

class _MyAppState extends State<MyApp> {

  String _userAgent = '<unknown>';
  String _webUserAgent = '<unknown>';

  @override
  void initState() {
    super.initState();
    initUserAgentState();
    print('\n\n\n\nYES ***********************');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        home: InAppWebViewPage()
    );
  }

  void initUserAgentState() {
    Future<void> initUserAgentState() async {
      String userAgent, webViewUserAgent;
      print('\nTRYING USER AGENT ');
      // Platform messages may fail, so we use a try/catch PlatformException.
      try {
        userAgent = await FlutterUserAgent.getPropertyAsync('userAgent');
        await FlutterUserAgent.init();
        webViewUserAgent = FlutterUserAgent.webViewUserAgent;
        print('''
        applicationVersion => ${FlutterUserAgent.getProperty('applicationVersion')}
        systemName         => ${FlutterUserAgent.getProperty('systemName')}
        userAgent          => $userAgent
        webViewUserAgent   => $webViewUserAgent
        packageUserAgent   => ${FlutterUserAgent.getProperty('packageUserAgent')}
      ''');
      } on PlatformException {
        print('\n\n\n\nERROR HAPPENED ');
        userAgent = webViewUserAgent = '<error>';

      }

      // If the widget was removed from the tree while the asynchronous platform
      // message was in flight, we want to discard the reply rather than calling
      // setState to update our non-existent appearance.
      if (!mounted) return;

      setState(() {
        _userAgent = userAgent;
        _webUserAgent = webViewUserAgent;
      });
    }
  }
}

class InAppWebViewPage extends StatefulWidget {
  @override
  _InAppWebViewPageState createState() => new _InAppWebViewPageState();
}

class _InAppWebViewPageState extends State<InAppWebViewPage> {
  InAppWebViewController _webViewController;
  ContextMenu contextMenu;

  String navigationMenu = "Google";

  String loadingURL = "https://www.google.com";
  double progress = 0;

  @override
  void initState() {
    super.initState();

    if (Platform.isAndroid) ram.WebView.platform = ram.SurfaceAndroidWebView();

    /*contextMenu = ContextMenu(
        menuItems: [
          ContextMenuItem(androidId: 1, iosId: "1", title: "Special", action: () async {
            print("Menu item Special clicked!");
            var selectedText = await _webViewController.getSelectedText();
            await _webViewController.clearFocus();
            await _webViewController.evaluateJavascript(source: "window.alert('You have selected: $selectedText')");
          })
        ],
        options: ContextMenuOptions(
            hideDefaultSystemContextMenuItems: false
        ),
        onCreateContextMenu: (hitTestResult) async {
          print("onCreateContextMenu");
          print(hitTestResult.extra);
          print(await _webViewController.getSelectedText());
        },
        onHideContextMenu: () {
          print("onHideContextMenu");
        },
        onContextMenuActionItemClicked: (contextMenuItemClicked) async {
          var id = (Platform.isAndroid) ? contextMenuItemClicked.androidId : contextMenuItemClicked.iosId;
          print("onContextMenuActionItemClicked: " + id.toString() + " " + contextMenuItemClicked.title);
        }
    );*/
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('InAppWebView Example'),
        ),
        resizeToAvoidBottomInset: true,
        body: Container(
            child: Column(children: <Widget>[
              Container(
                  padding: EdgeInsets.all(0.0),
                  child: progress < 1.0
                      ? LinearProgressIndicator(value: progress)
                      : Container()),
              Expanded(
                child: Container(
                  margin: const EdgeInsets.all(1.0),
                  decoration:
                  BoxDecoration(border: Border.all(color: Colors.transparent)),
                  child: InAppWebView(

                    initialUrl: loadingURL,
                    //initialUrl: "https://192.168.43.15:1010/SDxMembership/checkout/bt5_demo.html", // ACTUAL SDX
                    //initialUrl: "https://192.168.43.15:1010/SDxMembership/checkout/index.html", // ACTUAL SDX
                    //initialUrl: "https://coderthemes.com/hyper/modern/form-advanced.html", // BootStrap TEST
                    //initialUrl: "http://s3.amazonaws.com/inmobi-rm-app/CreativeUploads/mr/2k20/june/unilever_prod_test_v1/adtag_f2_s2.html", //GOOD UI
                    //initialFile: "assets/demo.html",
                    contextMenu: contextMenu,

                    initialOptions: InAppWebViewGroupOptions(
                      crossPlatform: InAppWebViewOptions(
                        debuggingEnabled: true,
                        clearCache: true,
                        userAgent : "Mozilla/5.0 (Linux; Android 10; GM1911 Build/QKQ1.190716.003; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/83.0.4103.106 Mobile ",
                      ),

                      android: AndroidInAppWebViewOptions(

                        textZoom: 100,
                      ),

                    ),


                    onWebViewCreated: (InAppWebViewController controller) {
                      controller.getOptions().then((val) {
                        print(val);
                      });
                      _webViewController = controller;
                    },
                    /*onLoadStart: (InAppWebViewController controller, String url) {
                      setState(() {
                        this.loadingURL = url;
                      });
                    },
                    onLoadStop: (InAppWebViewController controller, String url) async {
                      setState(() {
                        this.loadingURL = url;
                      });
                    },
                    onProgressChanged: (InAppWebViewController controller, int progress) {
                      setState(() {
                        this.progress = progress / 100;
                      });
                    },*/
                    onReceivedServerTrustAuthRequest: (controller, challenge) async {
                      print("**************** YES, Server requested the SelfSignin verification");
                      return ServerTrustAuthResponse(action: ServerTrustAuthResponseAction.PROCEED);
                    },

                  ),
                ),
              ),

            ])),
        drawer: Drawer(
          // Add a ListView to the drawer. This ensures the user can scroll
          // through the options in the drawer if there isn't enough vertical
          // space to fit everything.
          child: ListView(
            // Important: Remove any padding from the ListView.
            padding: EdgeInsets.zero,
            children: <Widget>[
              DrawerHeader(
                child: Text('RamK App Drawer'),
                decoration: BoxDecoration(
                  color: Colors.blue,
                  gradient: new LinearGradient(
                      colors: [
                        const Color(0xFF3366FF),
                        const Color(0xFF00CCFF),
                      ],
                      begin: const FractionalOffset(0.0, 0.0),
                      end: const FractionalOffset(1.0, 0.0),
                      stops: [0.0, 1.0],
                      tileMode: TileMode.clamp),
                ),
              ),
              ListTile(
                title: Text('BT Demo'),
                onTap: () {
                  Navigator.pop(context);
                  /*setState(() {
                    navigationMenu = "Bootstrap DEMO";
                    loadingURL     = "https://www.yahoo.co.in";
                  });*/

                },
              ),
              ListTile(
                title: Text('BT Index'),
                onTap: () {
                  setState(() {
                    navigationMenu = "Bootstrap Index";
                    loadingURL = "https://www.google.com";
                  });
                  Navigator.pop(context);
                },
              ),ListTile(
                title: Text('Amazon S3'),
                onTap: () {
                  setState(() {
                    navigationMenu = "Bootstrap Index";
                    loadingURL = "https://www.google.com";
                  });
                  Navigator.pop(context);
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}


